<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lanme Home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luanmingyi.cn/"/>
  <updated>2020-05-08T10:01:49.947Z</updated>
  <id>https://luanmingyi.cn/</id>
  
  <author>
    <name>Lanme2019</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis-数据结构</title>
    <link href="https://luanmingyi.cn/redis/redis-datastructure/"/>
    <id>https://luanmingyi.cn/redis/redis-datastructure/</id>
    <published>2019-07-01T10:37:12.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="知识灯塔" scheme="https://luanmingyi.cn/categories/%E7%9F%A5%E8%AF%86%E7%81%AF%E5%A1%94/"/>
    
    
      <category term="redis" scheme="https://luanmingyi.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>git 命令</title>
    <link href="https://luanmingyi.cn/git-command/"/>
    <id>https://luanmingyi.cn/git-command/</id>
    <published>2019-06-24T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用GIT命令汇总"><a href="#常用GIT命令汇总" class="headerlink" title="常用GIT命令汇总"></a>常用GIT命令汇总</h1><a id="more"></a><h2 id="本地仓库第一次提交到远程仓库"><a href="#本地仓库第一次提交到远程仓库" class="headerlink" title="本地仓库第一次提交到远程仓库"></a>本地仓库第一次提交到远程仓库</h2><p>1.初始化本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>2.将本地仓库文件 交由 <code>git</code>管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>3.提交代码到本地区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  commit  -m  "init"</span><br></pre></td></tr></table></figure><p>4.添加远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add  origin  [git仓库地址]</span><br></pre></td></tr></table></figure><p>5.<code>push</code> 代码到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>tips.<code>pull</code> 远程仓库代码 保持版本一致<br>** –allow-unrelated-histories //将本地代码仓库和远程库 历史提交记录合并 **</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull  =   git fetch  +  git  merge</span><br></pre></td></tr></table></figure><h2 id="配置了-gitignore-不生效"><a href="#配置了-gitignore-不生效" class="headerlink" title="配置了 .gitignore 不生效"></a>配置了 .gitignore 不生效</h2><p>当我们将 <code>.gitignore</code> 文件配置好后，却往往不能失效。这是因为 <code>.gitignore</code> 只能忽略那些没有被追踪(<code>track</code>)的文件，因为 <code>git</code>存在本地缓存，如果文件已经纳入了版本管理，那么修改 <code>.gitignore</code> 是不能失效的。那么解决方案就是要将 <code>git</code> 的本地缓存删除，然后重新提交。</p><ol><li><p>清除本地缓存</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>.gitignore</code> 文件</p></li><li><p>重新将文件交给<code>git</code>管理</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用GIT命令汇总&quot;&gt;&lt;a href=&quot;#常用GIT命令汇总&quot; class=&quot;headerlink&quot; title=&quot;常用GIT命令汇总&quot;&gt;&lt;/a&gt;常用GIT命令汇总&lt;/h1&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://luanmingyi.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://luanmingyi.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客02 -- 部署上线篇</title>
    <link href="https://luanmingyi.cn/hexo-deploy/"/>
    <id>https://luanmingyi.cn/hexo-deploy/</id>
    <published>2019-06-05T15:37:02.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>是一种用来消息聚合的格式规范</p><a id="more"></a><h1 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h1><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 page 服务</li><li>部署在自己的VPS上</li></ul><h2 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h2><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository， Repository name 一定要为 <strong>[你的用户名]</strong>.github.io</p><p>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen</span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[github仓库地址]git@github.com:lanme2019/lanme2019.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn  add  hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo cl</span><br><span class="line"><span class="meta">$</span> hexo g</span><br><span class="line"><span class="meta">$</span> hexo d</span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h2 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h2><p><strong>环境准备</strong><br><code>git</code><br><code>nginx</code></p><p>使用 VPS 部署博客的主要思路分为三步：</p><ul><li>hexo deploy 的时候通过 git 把 public 目录下的博客静态资源推送到远程仓库中</li><li>推送更新时触发 Git Hooks 将静态资源克隆到网站根目录下</li><li>使用 nginx 作为 Web 服务器提供对博客的 HTTP 访问</li></ul><h3 id="远程仓库推送"><a href="#远程仓库推送" class="headerlink" title="远程仓库推送"></a>远程仓库推送</h3><p>在本地 Git Bash 中执行如下命令将 ssh 公钥上传到 VPS：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-copy-id [用户]root@[你的服务器地址]luanmingyi.cn</span><br></pre></td></tr></table></figure><div class="note info"><p>该命令会自动把默认 ssh 公钥 id_rsa.pub 中的内容拷贝到 root 用户目录下的 .ssh/authorized_keys 文件中。</p></div><p>此时在本地 cmd 中用 root 用户登陆 VPS 将会直接成功登陆而无须输入密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh root@luanmingyi.cn</span><br></pre></td></tr></table></figure><p>在 root 用户目录下执行如下命令创建远程仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir blog.lanme2019.git</span><br><span class="line"><span class="meta">$</span> cd blog.lanme2019.git</span><br><span class="line"><span class="meta">$</span> git init --bare</span><br></pre></td></tr></table></figure><p>在本地站点配置文件 _config.yml 中添加 git 远程仓库信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        repo:</span> <span class="string">root@luanmingyi.cn:~/blog.lanme2019.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>使用<code>hexo deploy</code> 命令部署<br>配置git-hocks 推送代码自动更新<br>将克隆的代码复制到nginx目录下<br>配置nginx.conf 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sbin  bin 目录下</span><br><span class="line">./nginx -s reload 重启</span><br><span class="line">./nginx -s stop  停止</span><br><span class="line">./nginx   启动</span><br></pre></td></tr></table></figure><h1 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h1><p>我的博客使用又拍云CDN服务 加入又拍云联盟 免费使用CDN流量</p><h1 id="项目主题托管"><a href="#项目主题托管" class="headerlink" title="项目主题托管"></a>项目主题托管</h1><p>hexo 的 deploy 只能部署静态资源到 git 仓库 如果我们的主题文件需要备份怎么办?</p><ul><li>在github上新建分支 如 sagiri</li><li>在本地项目目录下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:lanme2019/lanme.git</span><br><span class="line">git push -u origin sagiri</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是一种用来消息聚合的格式规范&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://luanmingyi.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客01 -- 基础建站篇</title>
    <link href="https://luanmingyi.cn/hexo-init/"/>
    <id>https://luanmingyi.cn/hexo-init/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (6.9版本及以上)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><div class="note info"><p>Hexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。</p></div><p>具体安装方法自行google啦~</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h2><p>在 <code>cmd</code> 下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g  yarn</span><br></pre></td></tr></table></figure><div class="note info"><p><code>-g</code> 表示全局安装 将插件加入系统环境变量中 使 <code>cmd</code> 可以在任意目录下使用 <code>yarn</code> 指令</p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add  hexo</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>执行完毕后，你的项目会生成以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── yarn-lock.json</span><br></pre></td></tr></table></figure><p>到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客</p><h2 id="本地预览Hexo"><a href="#本地预览Hexo" class="headerlink" title="本地预览Hexo"></a>本地预览Hexo</h2><p>项目目录下依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl       <span class="comment">#  清除本地静态资源和db.json文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g        <span class="comment">#  生成静态资源 用来部署项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s        <span class="comment">#  启动本地预览服务器  默认端口4000</span></span></span><br></pre></td></tr></table></figure><p>成功后，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 启动你的预览</p><p><img src="/images/hexo-init/hexo1.png" alt="hexo 预览"></p><div class="note info"><p>如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？<br>hexo s启动命令也有附加参数<br>–p [端口号] 修改端口号<br>–debug 开启debug模式</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  --p  [端口号]   --debug</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 pages 服务</li><li>部署在自己的VPS上<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3></li></ul><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository<br>Repository name 一定要为 <strong>[你的用户名]</strong>.github.io<br>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，<br>此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，<br>新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[你的github仓库地址]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn  add  hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h3 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h3><p>考虑考虑</p><p>解开了揭开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://luanmingyi.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客01 -- 基础建站篇</title>
    <link href="https://luanmingyi.cn/hexo-init1/"/>
    <id>https://luanmingyi.cn/hexo-init1/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (6.9版本及以上)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><div class="note info"><p>Hexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。</p></div><p>具体安装方法自行google啦~</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h2><p>在 <code>cmd</code> 下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g  yarn</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>-g</code> 表示全局安装 将插件加入系统环境变量中 使 <code>cmd</code> 可以在任意目录下使用 <code>yarn</code> 指令</p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add  hexo</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>执行完毕后，你的项目会生成以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── yarn-lock.json</span><br></pre></td></tr></table></figure><p>到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客</p><h2 id="本地预览Hexo"><a href="#本地预览Hexo" class="headerlink" title="本地预览Hexo"></a>本地预览Hexo</h2><p>项目目录下依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl       <span class="comment">#  清除本地静态资源和db.json文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g        <span class="comment">#  生成静态资源 用来部署项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s        <span class="comment">#  启动本地预览服务器  默认端口4000</span></span></span><br></pre></td></tr></table></figure><p>成功后，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 启动你的预览</p><p><img src="/images/hexo-init/hexo1.png" alt="hexo 预览"></p><div class="note info"><p>如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？<br>hexo s启动命令也有附加参数<br>–p [端口号] 修改端口号<br>–debug 开启debug模式</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  --p  [端口号]   --debug</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 pages 服务</li><li>部署在自己的VPS上<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3></li></ul><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository<br>Repository name 一定要为 <strong>[你的用户名]</strong>.github.io<br>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，<br>此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，<br>新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[你的github仓库地址]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn  add  hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h3 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h3><p>考虑考虑</p><p>解开了揭开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://luanmingyi.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客01 -- 基础建站篇</title>
    <link href="https://luanmingyi.cn/hexo-init2/"/>
    <id>https://luanmingyi.cn/hexo-init2/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (6.9版本及以上)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><div class="note info"><p>Hexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。</p></div><p>具体安装方法自行google啦~</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h2><p>在 <code>cmd</code> 下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g  yarn</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>-g</code> 表示全局安装 将插件加入系统环境变量中 使 <code>cmd</code> 可以在任意目录下使用 <code>yarn</code> 指令</p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add  hexo</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>执行完毕后，你的项目会生成以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── yarn-lock.json</span><br></pre></td></tr></table></figure><p>到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客</p><h2 id="本地预览Hexo"><a href="#本地预览Hexo" class="headerlink" title="本地预览Hexo"></a>本地预览Hexo</h2><p>项目目录下依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl       <span class="comment">#  清除本地静态资源和db.json文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g        <span class="comment">#  生成静态资源 用来部署项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s        <span class="comment">#  启动本地预览服务器  默认端口4000</span></span></span><br></pre></td></tr></table></figure><p>成功后，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 启动你的预览</p><p><img src="/images/hexo-init/hexo1.png" alt="hexo 预览"></p><div class="note info"><p>如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？<br>hexo s启动命令也有附加参数<br>–p [端口号] 修改端口号<br>–debug 开启debug模式</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  --p  [端口号]   --debug</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 pages 服务</li><li>部署在自己的VPS上<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3></li></ul><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository<br>Repository name 一定要为 <strong>[你的用户名]</strong>.github.io<br>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，<br>此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，<br>新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[你的github仓库地址]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn  add  hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h3 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h3><p>考虑考虑</p><p>解开了揭开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://luanmingyi.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客01 -- 基础建站篇</title>
    <link href="https://luanmingyi.cn/hexo-init3/"/>
    <id>https://luanmingyi.cn/hexo-init3/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (6.9版本及以上)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><div class="note info"><p>Hexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。</p></div><p>具体安装方法自行google啦~</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h2><p>在 <code>cmd</code> 下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g  yarn</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>-g</code> 表示全局安装 将插件加入系统环境变量中 使 <code>cmd</code> 可以在任意目录下使用 <code>yarn</code> 指令</p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add  hexo</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>执行完毕后，你的项目会生成以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── yarn-lock.json</span><br></pre></td></tr></table></figure><p>到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客</p><h2 id="本地预览Hexo"><a href="#本地预览Hexo" class="headerlink" title="本地预览Hexo"></a>本地预览Hexo</h2><p>项目目录下依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl       <span class="comment">#  清除本地静态资源和db.json文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g        <span class="comment">#  生成静态资源 用来部署项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s        <span class="comment">#  启动本地预览服务器  默认端口4000</span></span></span><br></pre></td></tr></table></figure><p>成功后，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 启动你的预览</p><p><img src="/images/hexo-init/hexo1.png" alt="hexo 预览"></p><div class="note info"><p>如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？<br>hexo s启动命令也有附加参数<br>–p [端口号] 修改端口号<br>–debug 开启debug模式</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  --p  [端口号]   --debug</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 pages 服务</li><li>部署在自己的VPS上<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3></li></ul><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository<br>Repository name 一定要为 <strong>[你的用户名]</strong>.github.io<br>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，<br>此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，<br>新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[你的github仓库地址]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn  add  hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h3 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h3><p>考虑考虑</p><p>解开了揭开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://luanmingyi.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>面试知识梳理</title>
    <link href="https://luanmingyi.cn/java-interview/"/>
    <id>https://luanmingyi.cn/java-interview/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hey，这里是我对 JAVA 知识点的总结</p><p>采用广度优先的写法真的很容易烂尾，不过还是先梳理框架吧~</p><a id="more"></a><h1 id="面试知识梳理"><a href="#面试知识梳理" class="headerlink" title="面试知识梳理"></a>面试知识梳理</h1><h2 id="java方向"><a href="#java方向" class="headerlink" title="java方向"></a><strong>java方向</strong></h2><h3 id="基础核心"><a href="#基础核心" class="headerlink" title="基础核心"></a>基础核心</h3><h3 id="集合类容器"><a href="#集合类容器" class="headerlink" title="集合类容器"></a>集合类容器</h3><h3 id="IO-NIO类"><a href="#IO-NIO类" class="headerlink" title="IO/NIO类"></a>IO/NIO类</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><h3 id="JC垃圾回收"><a href="#JC垃圾回收" class="headerlink" title="JC垃圾回收"></a>JC垃圾回收</h3><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><h2 id="Spring框架方向"><a href="#Spring框架方向" class="headerlink" title="Spring框架方向"></a><strong>Spring框架方向</strong></h2><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h3 id="spring-mvc"><a href="#spring-mvc" class="headerlink" title="spring mvc"></a>spring mvc</h3><h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><h3 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h3><h2 id="中间件方向"><a href="#中间件方向" class="headerlink" title="中间件方向"></a><strong>中间件方向</strong></h2><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h3 id="mq"><a href="#mq" class="headerlink" title="mq"></a>mq</h3><h3 id="zk"><a href="#zk" class="headerlink" title="zk"></a>zk</h3><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h3 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h3><h2 id="mysql数据库方向"><a href="#mysql数据库方向" class="headerlink" title="mysql数据库方向"></a><strong>mysql数据库方向</strong></h2><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a><strong>项目</strong></h2><h3 id="高并发场景"><a href="#高并发场景" class="headerlink" title="高并发场景"></a>高并发场景</h3><h3 id="博客维护"><a href="#博客维护" class="headerlink" title="博客维护"></a>博客维护</h3><h3 id="公司项目"><a href="#公司项目" class="headerlink" title="公司项目"></a>公司项目</h3><h2 id="容器和CI-CD持续集成服务"><a href="#容器和CI-CD持续集成服务" class="headerlink" title="容器和CI/CD持续集成服务"></a><strong>容器和CI/CD持续集成服务</strong></h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hey，这里是我对 JAVA 知识点的总结&lt;/p&gt;&lt;p&gt;采用广度优先的写法真的很容易烂尾，不过还是先梳理框架吧~&lt;/p&gt;
    
    </summary>
    
      <category term="面试Skill" scheme="https://luanmingyi.cn/categories/%E9%9D%A2%E8%AF%95Skill/"/>
    
    
      <category term="Java" scheme="https://luanmingyi.cn/tags/Java/"/>
    
      <category term="面试" scheme="https://luanmingyi.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令汇总</title>
    <link href="https://luanmingyi.cn/linux-command/"/>
    <id>https://luanmingyi.cn/linux-command/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><a id="more"></a><p>查找目录：find /（查找范围） -name ‘查找关键字’ -type d<br>查找文件：find /（查找范围） -name 查找关键字 -print</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux命令&quot;&gt;&lt;a href=&quot;#linux命令&quot; class=&quot;headerlink&quot; title=&quot;linux命令&quot;&gt;&lt;/a&gt;linux命令&lt;/h1&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://luanmingyi.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://luanmingyi.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人博客01 -- 基础建站篇</title>
    <link href="https://luanmingyi.cn/redis/hexo-init/"/>
    <id>https://luanmingyi.cn/redis/hexo-init/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (6.9版本及以上)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li></ul><div class="note info"><p>Hexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。</p></div><p>具体安装方法自行google啦~</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h2><p>在 <code>cmd</code> 下输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g  yarn</span></span><br></pre></td></tr></table></figure><div class="note info"><p><code>-g</code> 表示全局安装 将插件加入系统环境变量中 使 <code>cmd</code> 可以在任意目录下使用 <code>yarn</code> 指令</p></div><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add  hexo</span><br></pre></td></tr></table></figure><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br></pre></td></tr></table></figure><p>执行完毕后，你的项目会生成以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       //依赖安装目录</span><br><span class="line">├── scaffolds          //模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         //草稿模板</span><br><span class="line">|   ├── page.md          //页面模板</span><br><span class="line">|   └── post.md          //文章模板</span><br><span class="line">├── source             //资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           //文章目录</span><br><span class="line">├── themes             //主题文件夹</span><br><span class="line">|   └── landscape        //默认主题</span><br><span class="line">├── .gitignore         //指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        //站点配置文件</span><br><span class="line">├── db.json            </span><br><span class="line">├── package.json</span><br><span class="line">└── yarn-lock.json</span><br></pre></td></tr></table></figure><p>到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客</p><h2 id="本地预览Hexo"><a href="#本地预览Hexo" class="headerlink" title="本地预览Hexo"></a>本地预览Hexo</h2><p>项目目录下依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl       <span class="comment">#  清除本地静态资源和db.json文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g        <span class="comment">#  生成静态资源 用来部署项目</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s        <span class="comment">#  启动本地预览服务器  默认端口4000</span></span></span><br></pre></td></tr></table></figure><p>成功后，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 启动你的预览</p><p><img src="/images/hexo-init/hexo1.png" alt="hexo 预览"></p><div class="note info"><p>如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？<br>hexo s启动命令也有附加参数<br>–p [端口号] 修改端口号<br>–debug 开启debug模式</p></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  --p  [端口号]   --debug</span></span><br></pre></td></tr></table></figure><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客</p><ul><li>使用 github 或 coding 的 pages 服务</li><li>部署在自己的VPS上<h3 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h3></li></ul><p>打开 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，新建一个 repository<br>Repository name 一定要为 <strong>[你的用户名]</strong>.github.io<br>将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen</span></span><br></pre></td></tr></table></figure><p>如果是 Windows 操作系统，<br>此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。</p><p>在 github 右上角头像点击 settings / SSH and GPG keys ，<br>新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中</p><p><img src="/images/hexo-init/hexo2.jpg" alt="new SHH key"></p><p>在站点配置文件 _config.yml 中设置</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">        github:</span> <span class="string">[你的github仓库地址]</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Hexo部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn  add  hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>在当前目录下打开 cmd输入以下命令 开始部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo cl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure><p>访问 [你的github项目名].github.io 查看是否部署成功</p><div class="note info"><p>每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 <code>package.json</code> 中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"scripts":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">   "deploy":</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">,</span></span><br><span class="line"><span class="attr">   "start":</span> <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug"</span><span class="string">,</span></span><br><span class="line"> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以后只需输入 <code>yarn start</code> ( 启动预览 ) <code>yarn deploy</code> ( 部署 )</p><h3 id="VPS部署"><a href="#VPS部署" class="headerlink" title="VPS部署"></a>VPS部署</h3><p>考虑考虑</p><p>解开了揭开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客搭建" scheme="https://luanmingyi.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://luanmingyi.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>redis笔记</title>
    <link href="https://luanmingyi.cn/redis/redis/"/>
    <id>https://luanmingyi.cn/redis/redis/</id>
    <published>2019-06-05T08:00:00.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="redis-笔记"><a href="#redis-笔记" class="headerlink" title="redis 笔记"></a>redis 笔记</h1><a id="more"></a><ul><li>单线程</li><li>非阻塞IO(NIO)</li><li>多种数据结构 字符串 hash list linked 位图 Hyperloglogs</li><li>禁止使用复杂度为 O（n）的命令 大量占用线程资源</li></ul><h2 id="关于key的注意事项"><a href="#关于key的注意事项" class="headerlink" title="关于key的注意事项"></a>关于key的注意事项</h2><ul><li>不要使用过长的KEY</li><li>不要因为过短缺少可读性</li><li>最好使用统一的规范来设计 Key，比如”object-type:id:attr”，以这一规范设计出的 Key 可能是”user:1000″或”comment:1234:reply-to”</li><li>最大key长 512M (超過1024字节就不好了)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis-笔记&quot;&gt;&lt;a href=&quot;#redis-笔记&quot; class=&quot;headerlink&quot; title=&quot;redis 笔记&quot;&gt;&lt;/a&gt;redis 笔记&lt;/h1&gt;
    
    </summary>
    
      <category term="面试" scheme="https://luanmingyi.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="redis" scheme="https://luanmingyi.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客系列：写作技巧篇</title>
    <link href="https://luanmingyi.cn/hexo-writing-skills/"/>
    <id>https://luanmingyi.cn/hexo-writing-skills/</id>
    <published>2018-11-20T20:09:52.000Z</published>
    <updated>2020-05-08T10:01:49.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://yearito-1256884783.image.myqcloud.com/thumbnails/mist.jpg!thumbnail" alt="题图" title="Photo by Henri Prestes"></p><p>本文介绍Hexo博客的写作技巧。</p><p>第一章中介绍了Hexo中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown写作语法。</p><p>第二章中介绍了Hexo中常用的内置标签，包括note标签、label标签、button标签、tab标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。</p><p>第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。</p><p>第四章中根据个人使用经验为大家推荐了几款优雅实用的Markdown写作工具。</p><a id="more"></a><h1 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h1><p>在博客目录下执行如下命令新建一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>如果未指定文章的布局（layout），则默认使用 <code>post</code> 布局，生成的文档存放于 <code>source\_posts\</code> 目录下，打开后使用Markdown语法进行写作，保存后刷新浏览器即可看到文章。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局是什么概念呢，你可以理解为新建文档时的一个模板，基于布局生成的文档将会继承布局的样式。</p><p>Hexo默认有三种布局：<code>post</code>、 <code>page</code> 和 <code>draft</code>，用户可以在 <code>scaffolds</code> 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 <code>default_layout</code>参数来指定生成文档时的默认布局。</p><h3 id="文章（post）"><a href="#文章（post）" class="headerlink" title="文章（post）"></a>文章（post）</h3><p>基于 <code>post</code> 布局生成的文档存在于 <code>source\_posts\</code> 目录下，该目录下的文档会作为博客正文显示在网站中。</p><h3 id="页面（page）"><a href="#页面（page）" class="headerlink" title="页面（page）"></a>页面（page）</h3><p><code>page</code> 布局用于生成类似 <strong>首页</strong> 和 <strong>归档</strong> 这样的页面。默认的Next主题样式中只包含首页和归档这两个链接，可以通过修改主题配置文件中的 <code>menu</code> 字段来新增更多页面菜单。</p><figure class="highlight diff"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line"><span class="addition">+ tags: /tags/ || tags</span></span><br><span class="line"><span class="addition">+ categories: /categories/ || th</span></span><br><span class="line"><span class="addition">+ archives: /archives/ || archive</span></span><br></pre></td></tr></table></figure><p>其中，<code>||</code> 之前的值表示菜单链接，之后的值表示所用的 <code>FontAwesome</code> 图标名称。</p><p>刷新页面后即可看到页面内多了几项菜单。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181103115805642.png" alt="新增菜单入口" title="新增菜单入口"></p><p>此时点击 <strong>关于</strong>、<strong>标签</strong> 和 <strong>分类</strong> 都会跳转到404页面，原因是我们只开放了页面入口，却没有创造对应于链接的页面视图，此时就需要通过 <code>hexo new page &lt;title&gt;</code> 命令来新建页面。</p><p>基于 <code>page</code> 布局的新建命令将会在 <code>source</code> 目录下新建一个 <code>&lt;title&gt;</code> 文件夹，并在该文件夹下创建一个 <code>index.md</code> 文件，编辑该文件即可修改页面内容。</p><p>例如，通过 <code>hexo new page tags</code> 命令将会生成如下目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└──  source             </span><br><span class="line">  ├── _posts          </span><br><span class="line">  └── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>编辑 <code>index.md</code> 文件，在Front-Matter中添加 <code>type: tags</code> ，Next主题将自动在该页面内显示标签云。</p><figure class="highlight diff"><figcaption><span>source\tags\index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  title: 标签</span><br><span class="line">  date: 2018-10-19 22:57:00</span><br><span class="line"><span class="addition">+ type: tags</span></span><br></pre></td></tr></table></figure><div class="note info"><p>Front-Matter是文件最上方以 <code>---</code> 分隔的区域，用于指定本文件的各种参数值</p></div><p>在菜单中点击 <strong>标签</strong> 跳转到刚创建的标签页面。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104120213426.png" alt="Hexo 标签页面" title="Hexo 标签页面"></p><p>同理可通过 <code>page</code> 布局生成 <strong>关于</strong> 和 <strong>分类</strong> 两个页面。</p><h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p><code>draft</code> 布局用于创建草稿，生成的文档存在于 source\_drafts\ 目录中，默认配置下将不会把该目录下的文档渲染到网站中。</p><p>通过以下命令将草稿发布为正式文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure><p>该命令会将 source\_drafts\ 目录下以</p><title>开头的草稿发布到 sources\_posts\ 目录下。另外，<code>hexo publish *</code> 会将最新创建的一篇草稿发布为正式文章，并以Front-Matter中的title作为文件名称。<p></p><p>考虑到一些文章可能需要数天才能完成，建议将新建文档时的默认布局设置为 <code>draft</code>：</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- default_layout: post</span></span><br><span class="line"><span class="addition">+ default_layout: draft</span></span><br></pre></td></tr></table></figure><h2 id="标签与分类"><a href="#标签与分类" class="headerlink" title="标签与分类"></a>标签与分类</h2><p>我们刚提到了标签，也提到了分类，那么标签和分类是什么，其区别是什么。</p><p>标签和分类都是用于对文章进行归档的一种方式，标签是一种列表结构，而分类是一种树结构。我们以人作为例子，从标签的角度考虑，我可以拥有程序员、高颜值、幽默等标签，这些标签之间没有层级关系；从分类的角度考虑，我是亚洲人、中国人、河南人，这些分类之间是有明确的包含关系的。</p><p>可以在Front-Matter中添加 <code>catergories</code> 和 <code>tags</code> 字段为文章添加标签和分类，如我为本文添加了 <strong>Hexo</strong> 和 <strong>Markdown</strong> 两个标签，并将其归类到了 <strong>技术/博客</strong> 类别，对应的Front-Matter结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo搭建个人博客系列：写作技巧篇</span><br><span class="line">tags: Hexo Markdown</span><br><span class="line">categories:</span><br><span class="line">- 技术</span><br><span class="line">- 博客</span><br></pre></td></tr></table></figure><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><p>Markdown是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档，广受程序员喜爱，目前许多网站都已经支持通过Markdown语法来写文章或者发表评论。</p><table><thead><tr><th>元素</th><th>Markdown语法</th><th>效果预览</th></tr></thead><tbody><tr><td>标题</td><td><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td><td><div style="font-weight:700"><div style="font-size:24px">标题一</div><div style="font-size:22px">标题二</div><div style="font-size:20px">标题三</div></div></td></tr><tr><td>加粗</td><td><code>**文字加粗**</code></td><td><strong>文字加粗</strong></td></tr><tr><td>引用</td><td><code>&gt; 引用文字</code></td><td><blockquote>引用文字</blockquote></td></tr><tr><td>有序列表</td><td><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td><td><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td></tr><tr><td>无序列表</td><td><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td><td><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td></tr><tr><td>链接</td><td><code>[链接](url)</code></td><td><a href="url">链接</a></td></tr><tr><td>图片</td><td><code>![图片](image.jpg)</code></td><td><i class="fa fa-image"></i></td></tr><tr><td>水平线</td><td><code>---</code></td><td><hr></td></tr><tr><td>代码</td><td><code>`code`</code></td><td><code>code</code></td></tr><tr><td>代码块</td><td><code>```code snippet```</code></td><td><figure class="highlight"><table><tbody><tr><td class="code"><pre>code snippet</pre></td></tr></tbody></table></figure></td></tr></tbody></table><div class="note info"><p>更多语法请参考 <a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">基础语法 | Markdown Guide</a> 和 <a href="https://www.markdownguide.org/extended-syntax" target="_blank" rel="noopener">扩展语法 | Markdown Guide</a></p></div><h1 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h1><div class="note info"><p>本章节参考 <a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.nginx | Hexo Theme Next主题样式测试</a> 及 <a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">内置标签 - NexT 使用文档</a></p></div><h2 id="文本居中标签"><a href="#文本居中标签" class="headerlink" title="文本居中标签"></a>文本居中标签</h2><p>居中标签效果如下：</p><blockquote class="blockquote-center"><p>我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。</p></blockquote><p>一般在引用单行文本时使用，如作为文章开篇题词。</p><p>可以通过以下几种方式使用该标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签方式 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h2><p>可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p><figure class="highlight js"><figcaption><span>Hellow World</span><a href="http://yearito.cn" target="_blank" rel="noopener">链接地址</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure><p>代码块进阶语法规则：</p><div style="background-color:#f7f7f7;margin:20px 0;padding:10px;border-radius:5px;font-family:consolas">&#x60;&#x60;&#x60; [language] [title] [url] [link text]<br>code snippet<br>&#x60;&#x60;&#x60;</div><p>其中，各参数意义如下：</p><ul><li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li><li>title：代码块标题，将会显示在左上角</li><li>url：链接地址，如果没有指定link text则会在右上角显示link</li><li>link text：链接名称，指定url后有效，将会显示在右上角</li></ul><p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以url为分界，左侧除了第一个单词会被解析为language，其他所有单词都会被解析为title，而右侧的所有单词都会被解析为link text。</p><p>如果不想填写title，可以在language和url之间添加至少三个空格。</p><div class="note info"><p>代码块支持多种语言高亮预设，详细的语言列表可查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.nginx | Hexo代码块中的颜色方案</a>。</p></div><p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p><figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> highlight:</span><br><span class="line">   enable: true</span><br><span class="line">   line_number: false</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br><span class="line">   tab_replace:</span><br></pre></td></tr></table></figure><p>如果设置语言为diff，可以在代码前添加 <code>+</code> 和 <code>-</code> 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p><div class="note info"><p>更多代码块高亮的个性化设置请参见 <a href="https://www.ofind.cn/blog/HEXO/HEXO%E4%B8%8B%E7%9A%84%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%8B%93%E5%B1%95%E4%BF%AE%E6%94%B9.html#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E6%A0%87%E8%AE%B0" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></p></div><h2 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h2><p>通过note标签可以为段落添加背景色，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定class。</p><p>各种class种类的效果如下：</p><div class="note primary"><p><strong>primary</strong> note tag</p></div><div class="note success"><p><strong>success</strong> note tag</p></div><div class="note info"><p><strong>info</strong> note tag</p></div><div class="note warning"><p><strong>warning</strong> note tag</p></div><div class="note danger"><p><strong>danger</strong> note tag</p></div><div class="note"><p>undefined class note tag</p></div><p>更多配置可在主题配置文件中设置</p><figure class="highlight yaml"><figcaption><span>themes\next\_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 标签样式预设</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">modern</span>  <span class="comment"># simple | modern | flat | disabled</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">false</span>  <span class="comment"># 是否显示图标</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span>  <span class="comment"># 圆角半径</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span>  <span class="comment"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><p>通过label标签可以为文字添加背景色，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [class]@text  %&#125;</span><br></pre></td></tr></table></figure><p>支持的class种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br><br>Repeat outrightly, but also repeat the well-being of<br><br>Eventually <span class="label warning">swaying in the desert oasis</span><br><br><span class="label success">I believe</span> I am<br><br><span class="label primary">Born as the bright summer flowers</span><br><br>Do not withered undefeated fiery demon rule<br><br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br><br>Bored</p></blockquote><p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p><h2 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h2><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure><p>也可简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure><p>其中， 图标ID来源于 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 。</p><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn #, 文本 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure><p><a class="btn" href="#">文本</a></p><p><a class="btn" href="#" title="标题">文本 & 标题</a></p><p><a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a></p><p><a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a></p><h2 id="tab标签"><a href="#tab标签" class="headerlink" title="tab标签"></a>tab标签</h2><p>tab标签用于快速创建tab选项卡，语法如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li><li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li><li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li><li>icon: 在标签页标题中添加Font awesome图标</li></ul><p>使用示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line">    标签页1文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页2 --&gt;</span><br><span class="line">    标签页2文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页3 --&gt;</span><br><span class="line">    标签页3文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>标签页3文本内容</p></div></div></div><h2 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h2><p>可以通过如下语法引入站内文章的地址或链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p><p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p><p>如以下标签将会生成 <code>/hexo-writing-skills/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path hexo-writing-skills %&#125;</span><br></pre></td></tr></table></figure><p>而以下标签则会生成 <a href="/hexo-writing-skills/" title="链接标题">链接标题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-writing-skills 链接标题 %&#125;</span><br></pre></td></tr></table></figure><p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p><h2 id="插入Swig代码"><a href="#插入Swig代码" class="headerlink" title="插入Swig代码"></a>插入Swig代码</h2><p>如果需要在页面内插入Swig代码，包括原生HTML代码，JavaScript脚本等，可以通过 raw 标签来禁止Markdown引擎渲染标签内的内容。语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关hexo插件支持的时候，可以通过写原生Web页面的形式引入脚本并编写实现逻辑。</p><h2 id="插入Gist"><a href="#插入Gist" class="headerlink" title="插入Gist"></a>插入Gist</h2><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><ul><li>gist_id: Gist仓库页面url中最后一段随机字符串</li><li>filename: Gist中的文件名</li></ul><p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p><p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p><div class="note warning"><p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p></div><h1 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h1><p>Hexo写作必备一款好用的Markdown文档编辑器，下面推荐几款我比较喜欢的。</p><h2 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181106041459974.png" alt="Sublime Text 3 用户界面" title="Sublime Text 3 用户界面"></p><p>Sublime Text 3 是一款轻量级的文档编辑器，响应速度极快，社区活跃，主题插件也很丰富，在Windows下可以取代记事本成为默认的文档编辑器，也可以通过集成不同的编程依赖包成为功能强大的IDE，还可以搭配上Markdown插件成为网络作家的写作工具。</p><p>推荐两个比较实用的Markdown写作插件：Markdown Editing和OmniMarkupPreviewer。</p><h3 id="Markdown-Editing"><a href="#Markdown-Editing" class="headerlink" title="Markdown Editing"></a><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a></h3><p>支持Markdown语法高亮，提供Markdown编辑的快捷键，提供多种主题样式。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Alt + V</td><td>在选中文本上创建行内链接或将剪贴板内容粘贴为所选文本的行内链接</td></tr><tr><td>Ctrl + Alt + R</td><td>在选中文本上创建参考式链接或将剪贴板内容粘贴为所选文本的参考式链接</td></tr><tr><td>Shift + Win + K</td><td>在选中文本上创建行内图片或将剪贴板内容粘贴为所选文本的行内图片</td></tr><tr><td>Alt + B</td><td>加粗强调，当未选中文本时默认加粗光标所在单词，再次按键取消加粗</td></tr><tr><td>Alt + I</td><td>斜体强调，当未选中文本时默认倾斜光标所在单词，再次按键取消斜体</td></tr><tr><td>Ctrl + 1~6</td><td>在空行上添加对应数字级别的标题，选中已有标题时按键可修改标题级别</td></tr><tr><td>Alt + Shift + 6</td><td>添加脚注</td></tr><tr><td>Shift + Tab</td><td>折叠/展开当前章节</td></tr><tr><td>Ctrl + Shift + Tab</td><td>折叠指定级别下的所有章节</td></tr><tr><td>Ctrl + Alt + Shift + PageUp/PageDown</td><td>跳转到上/下一个同级或更高级的其他标题</td></tr><tr><td>Ctrl + Shift + PageUp/PageDown</td><td>跳转到上/下一个标题</td></tr><tr><td>Ctrl + Shift + R</td><td>显示Markdown文件标题</td></tr></tbody></table><h3 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a><a href="https://github.com/timonwong/OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer</a></h3><p>用于在浏览器中实时预览Markdown文档，用户可以边在Sublime中写作边在浏览器中查看文档的实时变化，而不需要手动刷新浏览器。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Alt + O</td><td>在浏览器中预览</td></tr><tr><td>Ctrl + Alt + X</td><td>导出为HMTL</td></tr><tr><td>Ctrl + Alt + C</td><td>以HTML格式拷贝到剪贴板</td></tr></tbody></table><div class="note warning"><p>PlainTasks插件（一款Todo List工具）会与OmniMarkupPreviewer产生冲突，导致OmniMarkupPreviewer功能异常，如编辑后无法实时预览，<a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/111" target="_blank" rel="noopener">资源样式加载错误</a> 等。如果不想卸载PlainTasks，可以在使用OmniMarkupPreviewer时暂时禁用PlainTasks，具体做法为在Sublime Text的User Settings中添加如下代码：</p></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"ignored_packages":[</span><br><span class="line">  <span class="string">"PlainTasks"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="Hexo-Editor"><a href="#Hexo-Editor" class="headerlink" title="Hexo Editor"></a><a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">Hexo Editor</a></h2><p>Hexo Editor是专为Hexo博客写作打造的文件编辑器，界面极简美观，支持实时预览，支持图片上传。</p><p><img src="https://raw.githubusercontent.com/zhuzhuyule/HexoEditor/master/screenshots/main.png" alt="Hexo Editor 用户界面" title="Hexo Editor 用户界面"></p><div class="note warning"><p>本人在实际使用过程中发现该软件功能不太稳定，插入图片有时候会卡顿，甚至出现程序崩溃的现象。</p></div><h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Tab</td><td>增加缩进</td></tr><tr><td>Shift + Tab</td><td>减少缩进</td></tr><tr><td>Ctrl + B</td><td>加粗</td></tr><tr><td>Ctrl + I</td><td>斜体</td></tr><tr><td>Ctrl + D</td><td>删除当前行</td></tr><tr><td>Ctrl + `</td><td>将当前单词标记为代码</td></tr><tr><td>Ctrl + L</td><td>插入无序列表</td></tr><tr><td>Ctrl + Alt + L</td><td>插入有序列表</td></tr><tr><td>Ctrl + ]</td><td>降低标题级别</td></tr><tr><td>Ctrl + [</td><td>提升标题级别</td></tr><tr><td>Ctrl + =</td><td>插入引用</td></tr><tr><td>Ctrl + U</td><td>插入链接</td></tr><tr><td>Ctrl + Alt + U</td><td>插入图片</td></tr><tr><td>Ctrl + T</td><td>插入表格</td></tr><tr><td>Ctrl + V</td><td>粘贴为纯文本（去除格式）</td></tr><tr><td>Shift + Ctrl + V</td><td>粘贴（保留源格式）</td></tr><tr><td>Alt + F</td><td>格式化表格</td></tr></tbody></table><h3 id="操作快捷键"><a href="#操作快捷键" class="headerlink" title="操作快捷键"></a>操作快捷键</h3><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>新建Hexo文档</td></tr><tr><td>Ctrl + H</td><td>new hexo document</td></tr><tr><td>Ctrl + O</td><td>open md document</td></tr><tr><td>Ctrl + S</td><td>save md document</td></tr><tr><td>Shift + Ctrl + S</td><td>save as</td></tr><tr><td>Alt + Ctrl + S</td><td>open settings</td></tr><tr><td>Ctrl + W</td><td>toggle write mode</td></tr><tr><td>Ctrl + P</td><td>toggle preview mode</td></tr><tr><td>Ctrl + R</td><td>toggle read mode</td></tr></tbody></table><h2 id="MWeb"><a href="#MWeb" class="headerlink" title="MWeb"></a>MWeb</h2><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181023095629471.png" alt="Mweb 用户界面" title="Mweb 用户界面"></p><p>MWeb是Mac平台上一款专业的Markdown写作、记笔记、静态博客生成软件，支持图片上传。他的与众不同在于，除了具备一般Markdown编辑器所具有的一切基本功能之外，还支持以下特性：</p><ul><li>支持LaTeX公式、TOC</li><li>支持丰富的画图库，如mermaid、Graphviz、echarts、plantuml、流程图、时序图等</li><li>支持插入图片后自动上传到图床</li><li>拥有及其强大的发布功能，支持一键发布到各大博客平台和笔记软件中</li></ul><p>尽管拥有如此丰富的特性，但界面仍保持清爽简洁，开发者说到：</p><blockquote><p>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</p></blockquote><p>目前由oulvhai一人独自开发维护。</p><h2 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a><a href="https://dillinger.io/" target="_blank" rel="noopener">Dillinger</a></h2><p>一款优雅的在线Markdown编辑器，界面美观简洁。</p><p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181020114433264.png" alt="Dillinger 用户界面" title="Dillinger 用户界面"></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文介绍了Hexo博客的几项关键写作技巧，包括Markdown的基本语法，Hexo主题的内置标签等，本文还介绍了如何在文章中利用图床外链插入图片，如何利用Aplayer / Dplayer等音视频播放器插件在页面内插入多媒体元素等，并列举了几款写作工具以供选择，希望你能从中找到用起来最顺手的一款。如果你有更高级的个性化需求，你可以关注本系列的后续几篇文章：</p><ul><li>想要进一步美化主题，添加动效以及交互，请参考本系列中的 。</li><li>想要深度定制个性化站点，请参考本系列中的 。</li><li>想要了解如何将站点部署到公网，请参考本系列中的</li></ul><div class="reference-linking">参考链接</div><ul><li><a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown指南</a></li><li><a href="https://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">NexT使用文档 | 内置标签</a></li><li><a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Ivan.Nginx | Hexo Theme Next主题样式测试</a></li><li><a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.Nginx | Hexo代码块中的颜色方案</a></li><li><a href="https://www.ofind.cn/blog/HEXO/HEXO下的语法高亮拓展修改.html" target="_blank" rel="noopener">猪猪侠 | Hexo下的语法高亮拓展修改</a></li><li><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-aplayer | 中文文档</a></li><li><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">hexo-tag-dplayer | README</a></li><li><a href="http://dplayer.js.org/#/zh-Hans/" target="_blank" rel="noopener">Dplayer 官方中文文档</a></li></ul></title>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yearito-1256884783.image.myqcloud.com/thumbnails/mist.jpg!thumbnail&quot; alt=&quot;题图&quot; title=&quot;Photo by Henri Prestes&quot;&gt;&lt;/p&gt;&lt;p&gt;本文介绍Hexo博客的写作技巧。&lt;/p&gt;&lt;p&gt;第一章中介绍了Hexo中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown写作语法。&lt;/p&gt;&lt;p&gt;第二章中介绍了Hexo中常用的内置标签，包括note标签、label标签、button标签、tab标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。&lt;/p&gt;&lt;p&gt;第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。&lt;/p&gt;&lt;p&gt;第四章中根据个人使用经验为大家推荐了几款优雅实用的Markdown写作工具。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://luanmingyi.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hexo1" scheme="https://luanmingyi.cn/tags/Hexo1/"/>
    
  </entry>
  
</feed>
