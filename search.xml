<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[redis-数据结构]]></title>
    <url>%2Fredis%2Fredis-datastructure%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>知识灯塔</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 命令]]></title>
    <url>%2Fgit-command%2F</url>
    <content type="text"><![CDATA[常用GIT命令汇总本地仓库第一次提交到远程仓库1.初始化本地仓库1git init2.将本地仓库文件 交由 git管理1git add .3.提交代码到本地区1git commit -m "init"4.添加远程仓库地址1git remote add origin [git仓库地址]5.push 代码到远程仓库1git push origin mastertips.pull 远程仓库代码 保持版本一致** –allow-unrelated-histories //将本地代码仓库和远程库 历史提交记录合并 **1git pull origin master --allow-unrelated-histories1git pull = git fetch + git merge配置了 .gitignore 不生效当我们将 .gitignore 文件配置好后，却往往不能失效。这是因为 .gitignore 只能忽略那些没有被追踪(track)的文件，因为 git存在本地缓存，如果文件已经纳入了版本管理，那么修改 .gitignore 是不能失效的。那么解决方案就是要将 git 的本地缓存删除，然后重新提交。清除本地缓存script1git rm -r --cached .配置 .gitignore 文件重新将文件交给git管理script1git add .]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客02 -- 部署上线篇]]></title>
    <url>%2Fhexo-deploy%2F</url>
    <content type="text"><![CDATA[是一种用来消息聚合的格式规范部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 page 服务部署在自己的VPS上github部署打开 github ，新建一个 repository， Repository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [github仓库地址]git@github.com:lanme2019/lanme2019.github.io.git branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署环境准备gitnginx使用 VPS 部署博客的主要思路分为三步：hexo deploy 的时候通过 git 把 public 目录下的博客静态资源推送到远程仓库中推送更新时触发 Git Hooks 将静态资源克隆到网站根目录下使用 nginx 作为 Web 服务器提供对博客的 HTTP 访问远程仓库推送在本地 Git Bash 中执行如下命令将 ssh 公钥上传到 VPS：1$ ssh-copy-id [用户]root@[你的服务器地址]luanmingyi.cn该命令会自动把默认 ssh 公钥 id_rsa.pub 中的内容拷贝到 root 用户目录下的 .ssh/authorized_keys 文件中。此时在本地 cmd 中用 root 用户登陆 VPS 将会直接成功登陆而无须输入密码：1$ ssh root@luanmingyi.cn在 root 用户目录下执行如下命令创建远程仓库：123$ mkdir blog.lanme2019.git$ cd blog.lanme2019.git$ git init --bare在本地站点配置文件 _config.yml 中添加 git 远程仓库信息：12345deploy: type: git repo: repo: root@luanmingyi.cn:~/blog.lanme2019.git branch: master使用hexo deploy 命令部署配置git-hocks 推送代码自动更新将克隆的代码复制到nginx目录下配置nginx.conf 文件1234sbin bin 目录下./nginx -s reload 重启./nginx -s stop 停止./nginx 启动CDN 加速我的博客使用又拍云CDN服务 加入又拍云联盟 免费使用CDN流量项目主题托管hexo 的 deploy 只能部署静态资源到 git 仓库 如果我们的主题文件需要备份怎么办?在github上新建分支 如 sagiri在本地项目目录下12git remote add origin git@github.com:lanme2019/lanme.gitgit push -u origin sagiri]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客01 -- 基础建站篇]]></title>
    <url>%2Fhexo-init%2F</url>
    <content type="text"><![CDATA[环境准备Node.js (6.9版本及以上)gitHexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。具体安装方法自行google啦~开始使用安装 yarn在 cmd 下输入1$ npm install -g yarn-g 表示全局安装 将插件加入系统环境变量中 使 cmd 可以在任意目录下使用 yarn 指令安装 Hexo1$ yarn add hexo初始化Hexo安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ yarn执行完毕后，你的项目会生成以下目录结构123456789101112131415.├── node_modules //依赖安装目录├── scaffolds //模板文件夹，新建的文章将会从此目录下的文件中继承格式| ├── draft.md //草稿模板| ├── page.md //页面模板| └── post.md //文章模板├── source //资源文件夹，用于放置图片、数据、文章等资源| └── _posts //文章目录├── themes //主题文件夹| └── landscape //默认主题├── .gitignore //指定不纳入git版本控制的文件├── _config.yml //站点配置文件├── db.json ├── package.json└── yarn-lock.json到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客本地预览Hexo项目目录下依次输入123$ hexo cl # 清除本地静态资源和db.json文件$ hexo g # 生成静态资源 用来部署项目$ hexo s # 启动本地预览服务器 默认端口4000成功后，访问 http://localhost:4000/ 启动你的预览如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？hexo s启动命令也有附加参数–p [端口号] 修改端口号–debug 开启debug模式1$ hexo s --p [端口号] --debug部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 pages 服务部署在自己的VPS上github部署打开 github ，新建一个 repositoryRepository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [你的github仓库地址] branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署考虑考虑解开了揭开]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客01 -- 基础建站篇]]></title>
    <url>%2Fhexo-init1%2F</url>
    <content type="text"><![CDATA[环境准备Node.js (6.9版本及以上)gitHexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。具体安装方法自行google啦~开始使用安装 yarn在 cmd 下输入1$ npm install -g yarn-g 表示全局安装 将插件加入系统环境变量中 使 cmd 可以在任意目录下使用 yarn 指令安装 Hexo1$ yarn add hexo初始化Hexo安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ yarn执行完毕后，你的项目会生成以下目录结构123456789101112131415.├── node_modules //依赖安装目录├── scaffolds //模板文件夹，新建的文章将会从此目录下的文件中继承格式| ├── draft.md //草稿模板| ├── page.md //页面模板| └── post.md //文章模板├── source //资源文件夹，用于放置图片、数据、文章等资源| └── _posts //文章目录├── themes //主题文件夹| └── landscape //默认主题├── .gitignore //指定不纳入git版本控制的文件├── _config.yml //站点配置文件├── db.json ├── package.json└── yarn-lock.json到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客本地预览Hexo项目目录下依次输入123$ hexo cl # 清除本地静态资源和db.json文件$ hexo g # 生成静态资源 用来部署项目$ hexo s # 启动本地预览服务器 默认端口4000成功后，访问 http://localhost:4000/ 启动你的预览如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？hexo s启动命令也有附加参数–p [端口号] 修改端口号–debug 开启debug模式1$ hexo s --p [端口号] --debug部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 pages 服务部署在自己的VPS上github部署打开 github ，新建一个 repositoryRepository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [你的github仓库地址] branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署考虑考虑解开了揭开]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客01 -- 基础建站篇]]></title>
    <url>%2Fhexo-init2%2F</url>
    <content type="text"><![CDATA[环境准备Node.js (6.9版本及以上)gitHexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。具体安装方法自行google啦~开始使用安装 yarn在 cmd 下输入1$ npm install -g yarn-g 表示全局安装 将插件加入系统环境变量中 使 cmd 可以在任意目录下使用 yarn 指令安装 Hexo1$ yarn add hexo初始化Hexo安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ yarn执行完毕后，你的项目会生成以下目录结构123456789101112131415.├── node_modules //依赖安装目录├── scaffolds //模板文件夹，新建的文章将会从此目录下的文件中继承格式| ├── draft.md //草稿模板| ├── page.md //页面模板| └── post.md //文章模板├── source //资源文件夹，用于放置图片、数据、文章等资源| └── _posts //文章目录├── themes //主题文件夹| └── landscape //默认主题├── .gitignore //指定不纳入git版本控制的文件├── _config.yml //站点配置文件├── db.json ├── package.json└── yarn-lock.json到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客本地预览Hexo项目目录下依次输入123$ hexo cl # 清除本地静态资源和db.json文件$ hexo g # 生成静态资源 用来部署项目$ hexo s # 启动本地预览服务器 默认端口4000成功后，访问 http://localhost:4000/ 启动你的预览如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？hexo s启动命令也有附加参数–p [端口号] 修改端口号–debug 开启debug模式1$ hexo s --p [端口号] --debug部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 pages 服务部署在自己的VPS上github部署打开 github ，新建一个 repositoryRepository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [你的github仓库地址] branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署考虑考虑解开了揭开]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客01 -- 基础建站篇]]></title>
    <url>%2Fhexo-init3%2F</url>
    <content type="text"><![CDATA[环境准备Node.js (6.9版本及以上)gitHexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。具体安装方法自行google啦~开始使用安装 yarn在 cmd 下输入1$ npm install -g yarn-g 表示全局安装 将插件加入系统环境变量中 使 cmd 可以在任意目录下使用 yarn 指令安装 Hexo1$ yarn add hexo初始化Hexo安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ yarn执行完毕后，你的项目会生成以下目录结构123456789101112131415.├── node_modules //依赖安装目录├── scaffolds //模板文件夹，新建的文章将会从此目录下的文件中继承格式| ├── draft.md //草稿模板| ├── page.md //页面模板| └── post.md //文章模板├── source //资源文件夹，用于放置图片、数据、文章等资源| └── _posts //文章目录├── themes //主题文件夹| └── landscape //默认主题├── .gitignore //指定不纳入git版本控制的文件├── _config.yml //站点配置文件├── db.json ├── package.json└── yarn-lock.json到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客本地预览Hexo项目目录下依次输入123$ hexo cl # 清除本地静态资源和db.json文件$ hexo g # 生成静态资源 用来部署项目$ hexo s # 启动本地预览服务器 默认端口4000成功后，访问 http://localhost:4000/ 启动你的预览如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？hexo s启动命令也有附加参数–p [端口号] 修改端口号–debug 开启debug模式1$ hexo s --p [端口号] --debug部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 pages 服务部署在自己的VPS上github部署打开 github ，新建一个 repositoryRepository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [你的github仓库地址] branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署考虑考虑解开了揭开]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试知识梳理]]></title>
    <url>%2Fjava-interview%2F</url>
    <content type="text"><![CDATA[hey，这里是我对 JAVA 知识点的总结采用广度优先的写法真的很容易烂尾，不过还是先梳理框架吧~面试知识梳理java方向基础核心集合类容器IO/NIO类多线程jvmJC垃圾回收设计模式反射网络模型Spring框架方向springspring mvcmybatisspringboot中间件方向redismqzknginxdubbomysql数据库方向项目高并发场景博客维护公司项目容器和CI/CD持续集成服务dockerk8sJenkins]]></content>
      <categories>
        <category>面试Skill</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux常用命令汇总]]></title>
    <url>%2Flinux-command%2F</url>
    <content type="text"><![CDATA[linux命令查找目录：find /（查找范围） -name ‘查找关键字’ -type d查找文件：find /（查找范围） -name 查找关键字 -print]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客01 -- 基础建站篇]]></title>
    <url>%2Fredis%2Fhexo-init%2F</url>
    <content type="text"><![CDATA[环境准备Node.js (6.9版本及以上)gitHexo 依赖于 Node.js 和 git，所以在安装 Hexo 之前先确保已安装了这两项应用。具体安装方法自行google啦~开始使用安装 yarn在 cmd 下输入1$ npm install -g yarn-g 表示全局安装 将插件加入系统环境变量中 使 cmd 可以在任意目录下使用 yarn 指令安装 Hexo1$ yarn add hexo初始化Hexo安装 Hexo 完成后，执行下列命令，Hexo 将会在您指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ yarn执行完毕后，你的项目会生成以下目录结构123456789101112131415.├── node_modules //依赖安装目录├── scaffolds //模板文件夹，新建的文章将会从此目录下的文件中继承格式| ├── draft.md //草稿模板| ├── page.md //页面模板| └── post.md //文章模板├── source //资源文件夹，用于放置图片、数据、文章等资源| └── _posts //文章目录├── themes //主题文件夹| └── landscape //默认主题├── .gitignore //指定不纳入git版本控制的文件├── _config.yml //站点配置文件├── db.json ├── package.json└── yarn-lock.json到这里你就完成了所有的准备工作，只需一条指令即可启动你的博客本地预览Hexo项目目录下依次输入123$ hexo cl # 清除本地静态资源和db.json文件$ hexo g # 生成静态资源 用来部署项目$ hexo s # 启动本地预览服务器 默认端口4000成功后，访问 http://localhost:4000/ 启动你的预览如果端口被占用想自定义一个新端口 再或者想启动Debug模式怎么办？hexo s启动命令也有附加参数–p [端口号] 修改端口号–debug 开启debug模式1$ hexo s --p [端口号] --debug部署Hexo我们写 blog 更多还是想一起分享的，本地自嗨怎么能行，肯定要部署到服务器上啦~ 目前有2种方式可以部署我们的博客使用 github 或 coding 的 pages 服务部署在自己的VPS上github部署打开 github ，新建一个 repositoryRepository name 一定要为 [你的用户名].github.io将你的本地公钥绑定在github上，如果尚未生成 ssh 公钥对，执行如下命令生成新的公钥对：1$ ssh-keygen如果是 Windows 操作系统，此时会在 C:\Users\Username.ssh\ 目录下生成密钥文件 id_rsa 和公钥文件 id_rsa.pub。在 github 右上角头像点击 settings / SSH and GPG keys ，新建一个 SSH key ，将你id_rsa.pub 文件中的内容复制到 key中在站点配置文件 _config.yml 中设置_config.yml1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: [你的github仓库地址] branch: master安装Hexo部署插件1$ yarn add hexo-deployer-git在当前目录下打开 cmd输入以下命令 开始部署123$ hexo cl$ hexo g$ hexo d访问 [你的github项目名].github.io 查看是否部署成功每次启动或者部署输入三个指令很麻烦，可以把这三个指令写入到 package.json 中1234"scripts": &#123; "deploy": "hexo clean &amp;&amp; hexo g -d", "start": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --debug", &#125;以后只需输入 yarn start ( 启动预览 ) yarn deploy ( 部署 )VPS部署考虑考虑解开了揭开]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis笔记]]></title>
    <url>%2Fredis%2Fredis%2F</url>
    <content type="text"><![CDATA[redis 笔记单线程非阻塞IO(NIO)多种数据结构 字符串 hash list linked 位图 Hyperloglogs禁止使用复杂度为 O（n）的命令 大量占用线程资源关于key的注意事项不要使用过长的KEY不要因为过短缺少可读性最好使用统一的规范来设计 Key，比如”object-type:id:attr”，以这一规范设计出的 Key 可能是”user:1000″或”comment:1234:reply-to”最大key长 512M (超過1024字节就不好了)]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个人博客系列：写作技巧篇]]></title>
    <url>%2Fhexo-writing-skills%2F</url>
    <content type="text"><![CDATA[本文介绍Hexo博客的写作技巧。第一章中介绍了Hexo中写作相关的基本概念，包括三种基本布局，标签与分类，Markdown写作语法。第二章中介绍了Hexo中常用的内置标签，包括note标签、label标签、button标签、tab标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。第三章中介绍了在文档中插入图片、音乐、视频等多媒体元素的方案。第四章中根据个人使用经验为大家推荐了几款优雅实用的Markdown写作工具。开始写作在博客目录下执行如下命令新建一篇文章1$ hexo new [layout] &lt;title&gt;如果未指定文章的布局（layout），则默认使用 post 布局，生成的文档存放于 source\_posts\ 目录下，打开后使用Markdown语法进行写作，保存后刷新浏览器即可看到文章。布局布局是什么概念呢，你可以理解为新建文档时的一个模板，基于布局生成的文档将会继承布局的样式。Hexo默认有三种布局：post、 page 和 draft，用户可以在 scaffolds 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 default_layout参数来指定生成文档时的默认布局。文章（post）基于 post 布局生成的文档存在于 source\_posts\ 目录下，该目录下的文档会作为博客正文显示在网站中。页面（page）page 布局用于生成类似 首页 和 归档 这样的页面。默认的Next主题样式中只包含首页和归档这两个链接，可以通过修改主题配置文件中的 menu 字段来新增更多页面菜单。themes\next\_config.yml123456menu: home: / || home about: /about/ || user+ tags: /tags/ || tags+ categories: /categories/ || th+ archives: /archives/ || archive其中，|| 之前的值表示菜单链接，之后的值表示所用的 FontAwesome 图标名称。刷新页面后即可看到页面内多了几项菜单。此时点击 关于、标签 和 分类 都会跳转到404页面，原因是我们只开放了页面入口，却没有创造对应于链接的页面视图，此时就需要通过 hexo new page &lt;title&gt; 命令来新建页面。基于 page 布局的新建命令将会在 source 目录下新建一个 &lt;title&gt; 文件夹，并在该文件夹下创建一个 index.md 文件，编辑该文件即可修改页面内容。例如，通过 hexo new page tags 命令将会生成如下目录。12345.└── source ├── _posts └── tags └── index.md编辑 index.md 文件，在Front-Matter中添加 type: tags ，Next主题将自动在该页面内显示标签云。source\tags\index.md123 title: 标签 date: 2018-10-19 22:57:00+ type: tagsFront-Matter是文件最上方以 --- 分隔的区域，用于指定本文件的各种参数值在菜单中点击 标签 跳转到刚创建的标签页面。同理可通过 page 布局生成 关于 和 分类 两个页面。草稿（draft）draft 布局用于创建草稿，生成的文档存在于 source\_drafts\ 目录中，默认配置下将不会把该目录下的文档渲染到网站中。通过以下命令将草稿发布为正式文章：1$ hexo publish &lt;title&gt;该命令会将 source\_drafts\ 目录下以开头的草稿发布到 sources\_posts\ 目录下。另外，hexo publish * 会将最新创建的一篇草稿发布为正式文章，并以Front-Matter中的title作为文件名称。考虑到一些文章可能需要数天才能完成，建议将新建文档时的默认布局设置为 draft：_config.yml12- default_layout: post+ default_layout: draft标签与分类我们刚提到了标签，也提到了分类，那么标签和分类是什么，其区别是什么。标签和分类都是用于对文章进行归档的一种方式，标签是一种列表结构，而分类是一种树结构。我们以人作为例子，从标签的角度考虑，我可以拥有程序员、高颜值、幽默等标签，这些标签之间没有层级关系；从分类的角度考虑，我是亚洲人、中国人、河南人，这些分类之间是有明确的包含关系的。可以在Front-Matter中添加 catergories 和 tags 字段为文章添加标签和分类，如我为本文添加了 Hexo 和 Markdown 两个标签，并将其归类到了 技术/博客 类别，对应的Front-Matter结构如下：12345title: Hexo搭建个人博客系列：写作技巧篇tags: Hexo Markdowncategories:- 技术- 博客Markdown基本语法Markdown是一种标记语言，语法简单，易阅读易编写，可以让用户完全脱离鼠标写出样式丰富的文档，广受程序员喜爱，目前许多网站都已经支持通过Markdown语法来写文章或者发表评论。元素Markdown语法效果预览标题# 标题1## h2### h3标题一标题二标题三加粗**文字加粗**文字加粗引用&gt; 引用文字引用文字有序列表1. 第一项2. 第二项3. 第三项第一项第二项第三项无序列表- 第一项- 第二项- 第三项第一项第二项第三项链接[链接](url)链接图片![图片](image.jpg)水平线---代码`code`code代码块```code snippet```code snippet更多语法请参考 基础语法 | Markdown Guide 和 扩展语法 | Markdown GuideHexo内置标签本章节参考 Ivan.nginx | Hexo Theme Next主题样式测试 及 内置标签 - NexT 使用文档文本居中标签居中标签效果如下：我不去想是否能够成功，既然选择了远方，便只顾风雨兼程。一般在引用单行文本时使用，如作为文章开篇题词。可以通过以下几种方式使用该标签：123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;&lt;blockquote class="blockquote-center"&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签方式 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;代码块进阶用法可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：Hellow World链接地址1console.log("Hello world!");代码块进阶语法规则：&#x60;&#x60;&#x60; [language] [title] [url] [link text]code snippet&#x60;&#x60;&#x60;其中，各参数意义如下：langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字title：代码块标题，将会显示在左上角url：链接地址，如果没有指定link text则会在右上角显示linklink text：链接名称，指定url后有效，将会显示在右上角url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以url为分界，左侧除了第一个单词会被解析为language，其他所有单词都会被解析为title，而右侧的所有单词都会被解析为link text。如果不想填写title，可以在language和url之间添加至少三个空格。代码块支持多种语言高亮预设，详细的语言列表可查看Ivan.nginx | Hexo代码块中的颜色方案。可以在站点配置文件中设置 highlight.auto_detect: true 来开启自动语言检测高亮。_config.yml123456 highlight: enable: true line_number: false- auto_detect: false+ auto_detect: true tab_replace:如果设置语言为diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。更多代码块高亮的个性化设置请参见 猪猪侠 | Hexo下的语法高亮拓展修改note标签通过note标签可以为段落添加背景色，语法如下：123&#123;% note [class] %&#125;文本内容 (支持行内标签)&#123;% endnote %&#125;支持的class种类包括 default primary success info warning danger，也可以不指定class。各种class种类的效果如下：primary note tagsuccess note taginfo note tagwarning note tagdanger note tagundefined class note tag更多配置可在主题配置文件中设置themes\next\_config.yml123456note: # Note 标签样式预设 style: modern # simple | modern | flat | disabled icons: false # 是否显示图标 border_radius: 3 # 圆角半径 light_bg_offset: 0 # 默认背景减淡效果，以百分比计算label标签通过label标签可以为文字添加背景色，语法如下：1&#123;% label [class]@text %&#125;支持的class种类包括 default primary success info warning danger，默认使用 default 作为缺省。使用示例如下：123456789I heard the echo, &#123;% label default@from the valleys and the heart %&#125;Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;Repeat outrightly, but also repeat the well-being ofEventually &#123;% label warning@swaying in the desert oasis %&#125;&#123;% label success@I believe %&#125; I am&#123;% label primary@Born as the bright summer flowers %&#125;Do not withered undefeated fiery demon ruleHeart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;BoredI heard the echo, from the valleys and the heartOpen to the lonely soul of sickle harvestingRepeat outrightly, but also repeat the well-being ofEventually swaying in the desert oasisI believe I amBorn as the bright summer flowersDo not withered undefeated fiery demon ruleHeart rate and breathing to bear the load of the cumbersomeBored可在主题配置文件中设置 label: false 来取消label标签默认CSS样式。button按钮通过button标签可以快速添加带有主题样式的按钮，语法如下：1&#123;% button /path/to/url/, text, icon [class], title %&#125;也可简写为：1&#123;% btn /path/to/url/, text, icon [class], title %&#125;其中， 图标ID来源于 FontAwesome 。使用示例如下：1234&#123;% btn #, 文本 %&#125;&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;&#123;% btn #, 文本 &amp; 图标, home %&#125;&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;文本文本 & 标题文本 & 图标文本 & 大图标 (固定宽度)tab标签tab标签用于快速创建tab选项卡，语法如下12345&#123;% tabs [Unique name], [index] %&#125; &lt;!-- tab [Tab caption]@[icon] --&gt; 标签页内容（支持行内标签） &lt;!-- endtab --&gt;&#123;% endtabs %&#125;其中，各参数意义如下：Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题icon: 在标签页标题中添加Font awesome图标使用示例如下：1234567891011&#123;% tabs Tab标签列表 %&#125; &lt;!-- tab 标签页1 --&gt; 标签页1文本内容 &lt;!-- endtab --&gt; &lt;!-- tab 标签页2 --&gt; 标签页2文本内容 &lt;!-- endtab --&gt; &lt;!-- tab 标签页3 --&gt; 标签页3文本内容 &lt;!-- endtab --&gt;&#123;% endtabs %&#125;标签页1标签页2标签页3标签页1文本内容标签页2文本内容标签页3文本内容引用站内链接可以通过如下语法引入站内文章的地址或链接：12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125;其中，slug 表示 _post 目录下的Markdown文件名。post_path 标签将会渲染为文章的地址，即 permalink；而 post_link 标签将会渲染为链接，可以通过 title 指定链接标题。如以下标签将会生成 /hexo-writing-skills/1&#123;% post_path hexo-writing-skills %&#125;而以下标签则会生成 链接标题1&#123;% post_link hexo-writing-skills 链接标题 %&#125;这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 permalink 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。插入Swig代码如果需要在页面内插入Swig代码，包括原生HTML代码，JavaScript脚本等，可以通过 raw 标签来禁止Markdown引擎渲染标签内的内容。语法如下：123&#123;% raw %&#125;content&#123;% endraw %&#125;该标签通常用于在页面内引入三方脚本实现特殊功能，尤其是当该三方脚本尚无相关hexo插件支持的时候，可以通过写原生Web页面的形式引入脚本并编写实现逻辑。插入Gist如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:1&#123;% gist gist_id [filename] %&#125;其中，各参数意义如下：gist_id: Gist仓库页面url中最后一段随机字符串filename: Gist中的文件名如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：1&lt;script src="https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js"&gt;&lt;/script&gt;如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。写作工具Hexo写作必备一款好用的Markdown文档编辑器，下面推荐几款我比较喜欢的。Sublime Text 3Sublime Text 3 是一款轻量级的文档编辑器，响应速度极快，社区活跃，主题插件也很丰富，在Windows下可以取代记事本成为默认的文档编辑器，也可以通过集成不同的编程依赖包成为功能强大的IDE，还可以搭配上Markdown插件成为网络作家的写作工具。推荐两个比较实用的Markdown写作插件：Markdown Editing和OmniMarkupPreviewer。Markdown Editing支持Markdown语法高亮，提供Markdown编辑的快捷键，提供多种主题样式。快捷键说明Ctrl + Alt + V在选中文本上创建行内链接或将剪贴板内容粘贴为所选文本的行内链接Ctrl + Alt + R在选中文本上创建参考式链接或将剪贴板内容粘贴为所选文本的参考式链接Shift + Win + K在选中文本上创建行内图片或将剪贴板内容粘贴为所选文本的行内图片Alt + B加粗强调，当未选中文本时默认加粗光标所在单词，再次按键取消加粗Alt + I斜体强调，当未选中文本时默认倾斜光标所在单词，再次按键取消斜体Ctrl + 1~6在空行上添加对应数字级别的标题，选中已有标题时按键可修改标题级别Alt + Shift + 6添加脚注Shift + Tab折叠/展开当前章节Ctrl + Shift + Tab折叠指定级别下的所有章节Ctrl + Alt + Shift + PageUp/PageDown跳转到上/下一个同级或更高级的其他标题Ctrl + Shift + PageUp/PageDown跳转到上/下一个标题Ctrl + Shift + R显示Markdown文件标题OmniMarkupPreviewer用于在浏览器中实时预览Markdown文档，用户可以边在Sublime中写作边在浏览器中查看文档的实时变化，而不需要手动刷新浏览器。快捷键说明Ctrl + Alt + O在浏览器中预览Ctrl + Alt + X导出为HMTLCtrl + Alt + C以HTML格式拷贝到剪贴板PlainTasks插件（一款Todo List工具）会与OmniMarkupPreviewer产生冲突，导致OmniMarkupPreviewer功能异常，如编辑后无法实时预览，资源样式加载错误 等。如果不想卸载PlainTasks，可以在使用OmniMarkupPreviewer时暂时禁用PlainTasks，具体做法为在Sublime Text的User Settings中添加如下代码：123"ignored_packages":[ "PlainTasks"],Hexo EditorHexo Editor是专为Hexo博客写作打造的文件编辑器，界面极简美观，支持实时预览，支持图片上传。本人在实际使用过程中发现该软件功能不太稳定，插入图片有时候会卡顿，甚至出现程序崩溃的现象。编辑快捷键快捷键说明Tab增加缩进Shift + Tab减少缩进Ctrl + B加粗Ctrl + I斜体Ctrl + D删除当前行Ctrl + `将当前单词标记为代码Ctrl + L插入无序列表Ctrl + Alt + L插入有序列表Ctrl + ]降低标题级别Ctrl + [提升标题级别Ctrl + =插入引用Ctrl + U插入链接Ctrl + Alt + U插入图片Ctrl + T插入表格Ctrl + V粘贴为纯文本（去除格式）Shift + Ctrl + V粘贴（保留源格式）Alt + F格式化表格操作快捷键快捷键说明Ctrl + N新建Hexo文档Ctrl + Hnew hexo documentCtrl + Oopen md documentCtrl + Ssave md documentShift + Ctrl + Ssave asAlt + Ctrl + Sopen settingsCtrl + Wtoggle write modeCtrl + Ptoggle preview modeCtrl + Rtoggle read modeMWebMWeb是Mac平台上一款专业的Markdown写作、记笔记、静态博客生成软件，支持图片上传。他的与众不同在于，除了具备一般Markdown编辑器所具有的一切基本功能之外，还支持以下特性：支持LaTeX公式、TOC支持丰富的画图库，如mermaid、Graphviz、echarts、plantuml、流程图、时序图等支持插入图片后自动上传到图床拥有及其强大的发布功能，支持一键发布到各大博客平台和笔记软件中尽管拥有如此丰富的特性，但界面仍保持清爽简洁，开发者说到：原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。目前由oulvhai一人独自开发维护。Dillinger一款优雅的在线Markdown编辑器，界面美观简洁。结束语本文介绍了Hexo博客的几项关键写作技巧，包括Markdown的基本语法，Hexo主题的内置标签等，本文还介绍了如何在文章中利用图床外链插入图片，如何利用Aplayer / Dplayer等音视频播放器插件在页面内插入多媒体元素等，并列举了几款写作工具以供选择，希望你能从中找到用起来最顺手的一款。如果你有更高级的个性化需求，你可以关注本系列的后续几篇文章：想要进一步美化主题，添加动效以及交互，请参考本系列中的 。想要深度定制个性化站点，请参考本系列中的 。想要了解如何将站点部署到公网，请参考本系列中的参考链接Markdown指南NexT使用文档 | 内置标签Ivan.Nginx | Hexo Theme Next主题样式测试Ivan.Nginx | Hexo代码块中的颜色方案猪猪侠 | Hexo下的语法高亮拓展修改hexo-tag-aplayer | 中文文档hexo-tag-dplayer | READMEDplayer 官方中文文档]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo1</tag>
      </tags>
  </entry>
</search>
